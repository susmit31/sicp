(define (kths n k)
    (define thresh 1e-12)
    (define (thirds-iter n i curr-guess)
        (let ((j (/ i 2)))
            (if (< (abs (- (* (- k 1) curr-guess) (- n curr-guess))) thresh)
                (round-d (exact->inexact curr-guess) 6)
                (if (> (- (* (- k 1) curr-guess) (- n curr-guess)) 0)
                    (thirds-iter n j (- curr-guess j))
                    (thirds-iter n j (+ curr-guess j))
                )
            )
        )
    )
    (thirds-iter n (/ n 2) (/ n 2))
)

(define (round-d n d)
    (define flr_n (floor n))
    (define delta (- n flr_n))
    (define factor (pow 10 d))
    (+ flr_n (/ (round (* delta factor)) factor))
)

(define (pow base exponent)
    (if (= exponent 0) 1
        (* base (pow base (-1+ exponent)))
    )
)