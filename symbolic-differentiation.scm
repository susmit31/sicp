(define (in exprn variable)
    (cond ((or (symbol? exprn) (and (number? exprn) (number? variable))) 
            (eq? exprn variable)
          )
          ((and (number? exprn) (symbol? variable)) #f)
          ((or (pair? exprn) (list? exprn)) 
                (if (= (length exprn) 1) 
                    (in (car exprn) variable)
                    (or (in (car exprn) variable) 
                        (in (cdr exprn) variable)
                    )
                )
          )
    )
)

(define (const? exprn variable)
    (not (in exprn variable))
)

(define (deriv exprn variable)
    (cond ((const? exprn variable) 0)
          ((eq? exprn variable) 1)
          ((eq? (car exprn) '+) (deriv+ (cdr exprn) variable))
          ((eq? (car exprn) '*) (deriv* (cdr exprn) variable))
    )
)

(define (deriv+ summands variable)
    (if (= (length summands) 1) (deriv (car summands) variable)
          (list '+ (deriv (car summands) variable) (deriv+ (cdr summands) variable))
    )
)

(define (deriv* multands variable)
    (define u (if (symbol? multands) multands (car multands)))
    (define v (if (symbol? multands) 
                  '1
                  (if (= (length multands) 2) (cadr multands) (cdr multands))
              )
    )
    (define deriv_u (lambda (u) (deriv u variable)))
    (define deriv_v (if (or (symbol? v) (number? v)) 
                        (lambda (v) (deriv v variable))
                        (lambda (v) (deriv* v variable))
                    )
    )
    (cond 
        ((const? u variable) (list '* u (deriv_v v)))
        ((const? v variable) (list '* v (deriv_u u)))
        (else
            (list '+ (list '* (deriv_u u) v) (list '* u (deriv_v v)))
        )
    )
)


(deriv '(+ (* x x) (* 2 x y) (* y y)) 'y)